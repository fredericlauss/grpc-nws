// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: internal/proto/twitchy.proto

package tutorialpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Twitchy_NewStream_FullMethodName  = "/twitchy.Twitchy/NewStream"
	Twitchy_SendStream_FullMethodName = "/twitchy.Twitchy/SendStream"
	Twitchy_ListStream_FullMethodName = "/twitchy.Twitchy/ListStream"
	Twitchy_GetStream_FullMethodName  = "/twitchy.Twitchy/GetStream"
	Twitchy_GetLogs_FullMethodName    = "/twitchy.Twitchy/GetLogs"
)

// TwitchyClient is the client API for Twitchy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitchyClient interface {
	NewStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*StreamValidation, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamData, Ack], error)
	ListStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamInfo], error)
	GetStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamData], error)
	GetLogs(ctx context.Context, in *LogsInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogData], error)
}

type twitchyClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitchyClient(cc grpc.ClientConnInterface) TwitchyClient {
	return &twitchyClient{cc}
}

func (c *twitchyClient) NewStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (*StreamValidation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamValidation)
	err := c.cc.Invoke(ctx, Twitchy_NewStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchyClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamData, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Twitchy_ServiceDesc.Streams[0], Twitchy_SendStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamData, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_SendStreamClient = grpc.BidiStreamingClient[StreamData, Ack]

func (c *twitchyClient) ListStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Twitchy_ServiceDesc.Streams[1], Twitchy_ListStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamInfo, StreamInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_ListStreamClient = grpc.ServerStreamingClient[StreamInfo]

func (c *twitchyClient) GetStream(ctx context.Context, in *StreamInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Twitchy_ServiceDesc.Streams[2], Twitchy_GetStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamInfo, StreamData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_GetStreamClient = grpc.ServerStreamingClient[StreamData]

func (c *twitchyClient) GetLogs(ctx context.Context, in *LogsInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Twitchy_ServiceDesc.Streams[3], Twitchy_GetLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogsInfo, LogData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_GetLogsClient = grpc.ServerStreamingClient[LogData]

// TwitchyServer is the server API for Twitchy service.
// All implementations must embed UnimplementedTwitchyServer
// for forward compatibility.
type TwitchyServer interface {
	NewStream(context.Context, *StreamInfo) (*StreamValidation, error)
	SendStream(grpc.BidiStreamingServer[StreamData, Ack]) error
	ListStream(*StreamInfo, grpc.ServerStreamingServer[StreamInfo]) error
	GetStream(*StreamInfo, grpc.ServerStreamingServer[StreamData]) error
	GetLogs(*LogsInfo, grpc.ServerStreamingServer[LogData]) error
	mustEmbedUnimplementedTwitchyServer()
}

// UnimplementedTwitchyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwitchyServer struct{}

func (UnimplementedTwitchyServer) NewStream(context.Context, *StreamInfo) (*StreamValidation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStream not implemented")
}
func (UnimplementedTwitchyServer) SendStream(grpc.BidiStreamingServer[StreamData, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedTwitchyServer) ListStream(*StreamInfo, grpc.ServerStreamingServer[StreamInfo]) error {
	return status.Errorf(codes.Unimplemented, "method ListStream not implemented")
}
func (UnimplementedTwitchyServer) GetStream(*StreamInfo, grpc.ServerStreamingServer[StreamData]) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedTwitchyServer) GetLogs(*LogsInfo, grpc.ServerStreamingServer[LogData]) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedTwitchyServer) mustEmbedUnimplementedTwitchyServer() {}
func (UnimplementedTwitchyServer) testEmbeddedByValue()                 {}

// UnsafeTwitchyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitchyServer will
// result in compilation errors.
type UnsafeTwitchyServer interface {
	mustEmbedUnimplementedTwitchyServer()
}

func RegisterTwitchyServer(s grpc.ServiceRegistrar, srv TwitchyServer) {
	// If the following call pancis, it indicates UnimplementedTwitchyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Twitchy_ServiceDesc, srv)
}

func _Twitchy_NewStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchyServer).NewStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Twitchy_NewStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchyServer).NewStream(ctx, req.(*StreamInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitchy_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwitchyServer).SendStream(&grpc.GenericServerStream[StreamData, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_SendStreamServer = grpc.BidiStreamingServer[StreamData, Ack]

func _Twitchy_ListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitchyServer).ListStream(m, &grpc.GenericServerStream[StreamInfo, StreamInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_ListStreamServer = grpc.ServerStreamingServer[StreamInfo]

func _Twitchy_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitchyServer).GetStream(m, &grpc.GenericServerStream[StreamInfo, StreamData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_GetStreamServer = grpc.ServerStreamingServer[StreamData]

func _Twitchy_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TwitchyServer).GetLogs(m, &grpc.GenericServerStream[LogsInfo, LogData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Twitchy_GetLogsServer = grpc.ServerStreamingServer[LogData]

// Twitchy_ServiceDesc is the grpc.ServiceDesc for Twitchy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Twitchy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twitchy.Twitchy",
	HandlerType: (*TwitchyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewStream",
			Handler:    _Twitchy_NewStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _Twitchy_SendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListStream",
			Handler:       _Twitchy_ListStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStream",
			Handler:       _Twitchy_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLogs",
			Handler:       _Twitchy_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/twitchy.proto",
}
