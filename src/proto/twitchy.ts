// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: src/proto/twitchy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type ClientReadableStream,
  type handleBidiStreamingCall,
  type handleServerStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "twitchy";

export interface StreamData {
  ts: number;
  audio: Buffer;
  video: Buffer;
}

export interface Ack {
  size: number;
  error: number;
}

export interface StreamRequest {
  dummy: number;
}

export interface StreamDataClient {
  ts: number;
  audio: Buffer;
  video: Buffer;
}

function createBaseStreamData(): StreamData {
  return { ts: 0, audio: Buffer.alloc(0), video: Buffer.alloc(0) };
}

export const StreamData: MessageFns<StreamData> = {
  encode(message: StreamData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ts !== 0) {
      writer.uint32(8).uint64(message.ts);
    }
    if (message.audio.length !== 0) {
      writer.uint32(18).bytes(message.audio);
    }
    if (message.video.length !== 0) {
      writer.uint32(26).bytes(message.video);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ts = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.audio = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.video = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamData {
    return {
      ts: isSet(object.ts) ? globalThis.Number(object.ts) : 0,
      audio: isSet(object.audio) ? Buffer.from(bytesFromBase64(object.audio)) : Buffer.alloc(0),
      video: isSet(object.video) ? Buffer.from(bytesFromBase64(object.video)) : Buffer.alloc(0),
    };
  },

  toJSON(message: StreamData): unknown {
    const obj: any = {};
    if (message.ts !== 0) {
      obj.ts = Math.round(message.ts);
    }
    if (message.audio.length !== 0) {
      obj.audio = base64FromBytes(message.audio);
    }
    if (message.video.length !== 0) {
      obj.video = base64FromBytes(message.video);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamData>, I>>(base?: I): StreamData {
    return StreamData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamData>, I>>(object: I): StreamData {
    const message = createBaseStreamData();
    message.ts = object.ts ?? 0;
    message.audio = object.audio ?? Buffer.alloc(0);
    message.video = object.video ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseAck(): Ack {
  return { size: 0, error: 0 };
}

export const Ack: MessageFns<Ack> = {
  encode(message: Ack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.size !== 0) {
      writer.uint32(8).uint32(message.size);
    }
    if (message.error !== 0) {
      writer.uint32(16).int32(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.size = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.error = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ack {
    return {
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      error: isSet(object.error) ? globalThis.Number(object.error) : 0,
    };
  },

  toJSON(message: Ack): unknown {
    const obj: any = {};
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.error !== 0) {
      obj.error = Math.round(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ack>, I>>(base?: I): Ack {
    return Ack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ack>, I>>(object: I): Ack {
    const message = createBaseAck();
    message.size = object.size ?? 0;
    message.error = object.error ?? 0;
    return message;
  },
};

function createBaseStreamRequest(): StreamRequest {
  return { dummy: 0 };
}

export const StreamRequest: MessageFns<StreamRequest> = {
  encode(message: StreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dummy !== 0) {
      writer.uint32(8).int64(message.dummy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.dummy = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamRequest {
    return { dummy: isSet(object.dummy) ? globalThis.Number(object.dummy) : 0 };
  },

  toJSON(message: StreamRequest): unknown {
    const obj: any = {};
    if (message.dummy !== 0) {
      obj.dummy = Math.round(message.dummy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamRequest>, I>>(base?: I): StreamRequest {
    return StreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamRequest>, I>>(object: I): StreamRequest {
    const message = createBaseStreamRequest();
    message.dummy = object.dummy ?? 0;
    return message;
  },
};

function createBaseStreamDataClient(): StreamDataClient {
  return { ts: 0, audio: Buffer.alloc(0), video: Buffer.alloc(0) };
}

export const StreamDataClient: MessageFns<StreamDataClient> = {
  encode(message: StreamDataClient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ts !== 0) {
      writer.uint32(8).uint64(message.ts);
    }
    if (message.audio.length !== 0) {
      writer.uint32(18).bytes(message.audio);
    }
    if (message.video.length !== 0) {
      writer.uint32(26).bytes(message.video);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamDataClient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamDataClient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ts = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.audio = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.video = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamDataClient {
    return {
      ts: isSet(object.ts) ? globalThis.Number(object.ts) : 0,
      audio: isSet(object.audio) ? Buffer.from(bytesFromBase64(object.audio)) : Buffer.alloc(0),
      video: isSet(object.video) ? Buffer.from(bytesFromBase64(object.video)) : Buffer.alloc(0),
    };
  },

  toJSON(message: StreamDataClient): unknown {
    const obj: any = {};
    if (message.ts !== 0) {
      obj.ts = Math.round(message.ts);
    }
    if (message.audio.length !== 0) {
      obj.audio = base64FromBytes(message.audio);
    }
    if (message.video.length !== 0) {
      obj.video = base64FromBytes(message.video);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamDataClient>, I>>(base?: I): StreamDataClient {
    return StreamDataClient.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamDataClient>, I>>(object: I): StreamDataClient {
    const message = createBaseStreamDataClient();
    message.ts = object.ts ?? 0;
    message.audio = object.audio ?? Buffer.alloc(0);
    message.video = object.video ?? Buffer.alloc(0);
    return message;
  },
};

export type TwitchyService = typeof TwitchyService;
export const TwitchyService = {
  sendStream: {
    path: "/twitchy.Twitchy/SendStream",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: StreamData) => Buffer.from(StreamData.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamData.decode(value),
    responseSerialize: (value: Ack) => Buffer.from(Ack.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Ack.decode(value),
  },
  getStream: {
    path: "/twitchy.Twitchy/GetStream",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: StreamRequest) => Buffer.from(StreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamRequest.decode(value),
    responseSerialize: (value: StreamDataClient) => Buffer.from(StreamDataClient.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StreamDataClient.decode(value),
  },
} as const;

export interface TwitchyServer extends UntypedServiceImplementation {
  sendStream: handleBidiStreamingCall<StreamData, Ack>;
  getStream: handleServerStreamingCall<StreamRequest, StreamDataClient>;
}

export interface TwitchyClient extends Client {
  sendStream(): ClientDuplexStream<StreamData, Ack>;
  sendStream(options: Partial<CallOptions>): ClientDuplexStream<StreamData, Ack>;
  sendStream(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<StreamData, Ack>;
  getStream(request: StreamRequest, options?: Partial<CallOptions>): ClientReadableStream<StreamDataClient>;
  getStream(
    request: StreamRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<StreamDataClient>;
}

export const TwitchyClient = makeGenericClientConstructor(TwitchyService, "twitchy.Twitchy") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TwitchyClient;
  service: typeof TwitchyService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
